#インポート
import os
import pygame
from pygame.locals import *
import sys

#初期化
pygame.init()

map_width_list = [5]#マップの縦・横のマスの数を指定(3~9まで指定できます)。指定するときはmap_informationも変えてください。
map_information = (0,1,0,0,0, 0,1,0,0,0, 0,1,1,0,0, 0,0,0,0,0, 0,0,1,1,0)
#↑マップの壁の位置を指定。0が道で1が壁です。一番初めの数が左上で、一番最後の数が右下です。一つ目のかたまりが一番上の行です。

#画面の大きさを設定
display_width = 800
display_height = 600

#色の設定
black = (0,0,0)
white = (255,255,255)

#画面を構築
display = pygame.display.set_mode((display_width,display_height))
pygame.display.set_caption('demo')

#画像を取り込む
squareImg = pygame.image.load("images\square.png")
square_width = 50

circleImg = pygame.image.load("images\circle.png")
circle_width = 50

startImg = pygame.image.load("images\start.png")
start_width = 50

goalImg = pygame.image.load("images\goal.png")
goal_width = 50

wallImg = pygame.image.load("images\wall.png")
wall_width = 50

#マップを描く関数
def main(number,square_x,square_y):
    wall_number = 0
    Number_of_times = map_width_list[number]
    for w in range(Number_of_times):
        for i in range(Number_of_times):
            wall = map_information[wall_number]
            if wall == 1:
                display.blit(pygame.transform.scale(wallImg, (square_width+1, square_width+1)),(square_x,square_y))#壁を表示
            else:
                display.blit(pygame.transform.scale(squareImg, (square_width+1, square_width+1)),(square_x,square_y))#道を表示
            wall_number += 1
            square_x += square_width
        square_x = xy
        square_y += square_width
    square_x,square_y = square_width,square_width
    display.blit(pygame.transform.scale(startImg, (start_width+1, start_width+1)),(square_x,square_y))#スタートを表示
    display.blit(pygame.transform.scale(goalImg, (goal_width+1, goal_width+1)),(square_x*Number_of_times,square_y*Number_of_times))#ゴールを表示
    pygame.display.flip()

#指令関数
def game_loop():
    running = True
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:#終了処理(画面の×が押されたなど)感知
                gameExit()#終了処理
            if event.type == MOUSEBUTTONDOWN:#マウスのクリックを感知
                        mouse_x, mouse_y = event.pos#マウスの座標を取得
                        mouse_click(mouse_x, mouse_y)
                        pygame.display.flip()#画面のアップデート

#マウスがクリックされた時の処理を担う関数
def mouse_click(mouse_x, mouse_y):
    Current_location(mouse_x, mouse_y)#マウスの座標を表示
    i = square_width
    s = map_width_list[number]
    if square_x <= mouse_x < square_x + i: #row_Aであることを判断
        column_judgment(square_x,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*2): #row_B
        column_judgment(square_x*2,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*3): #row_C
        column_judgment(square_x*3,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*4) and not s < 4: #row_D
        column_judgment(square_x*4,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*5) and not s < 5: #row_E
        column_judgment(square_x*5,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*6) and not s < 6: #row_F
        column_judgment(square_x*6,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*7) and not s < 7: #row_G
        column_judgment(square_x*7,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*8) and not s < 8: #row_H
        column_judgment(square_x*8,square_y,mouse_x,mouse_y)
    elif mouse_x < square_x + (i*9) and not s < 9: #row_I
        column_judgment(square_x*9,square_y,mouse_x,mouse_y)

#どのマスが押されたかを判定する関数
def column_judgment(circle_x,circle_y,mouse_x,mouse_y):
    i = square_width
    s = map_width_list[number]
    x = square_x*s
    if square_y <= mouse_y < square_y + i: #column_1であることを認識
        if square_x <= mouse_x < square_x + i:#そのマスがスタートだったらpass
            pass
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y))#印をつける
            pygame.display.update()#画面のアップデート
    elif mouse_y < square_y + (i*2): #column_2
        display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*2))
        pygame.display.update()
    elif mouse_y < square_y + (i*3): #column_3
        if s == 3:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*3))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*3))
            pygame.display.update()
    elif mouse_y < square_y + (i*4) and not s < 4: #column_4
        if s == 4:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*4))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*4))
            pygame.display.update()
    elif mouse_y < square_y + (i*5) and not s < 5: #column_5
        if s == 5:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*5))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*5))
            pygame.display.update()
    elif mouse_y < square_y + (i*6) and not s < 6: #column_6
        if s == 6:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*6))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*6))
            pygame.display.update()
    elif mouse_y < square_y + (i*7) and not s < 7: #column_7
        if s == 7:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*7))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*7))
            pygame.display.update()
    elif mouse_y < square_y + (i*8) and not s < 8: #column_8
        if s == 8:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*8))
                pygame.display.update() 
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*8))
            pygame.display.update()
    elif mouse_y < square_y + (i*9) and not s < 9: #column_9
        if s == 9:
            if mouse_x < square_x*s:
                display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*9))
                pygame.display.update()  
        else:
            display.blit(pygame.transform.scale(circleImg, (circle_width+1, circle_width+1)),(circle_x,circle_y*9))
            pygame.display.update()

#クリックされた座標を表示する関数
def Current_location(mouse_x,mouse_y):
    print("x: {} y: {}".format(mouse_x,mouse_y))

#終了処理を行う関数
def gameExit():
    running = False
    pygame.quit()
    quit()    

#画面を白で塗りつぶして表示            
display.fill(white)

#左上のマスの位置を決める変数
square_x = 50
square_y = square_x
xy = square_x

number = 0

main(number,square_x,square_y)#マップ表示
game_loop()#指令関数
gameExit()#終了処理
